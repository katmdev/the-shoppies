{"version":3,"sources":["lib/axios.js","components/Search.js","components/Results.js","components/Nominations.js","App.js","serviceWorker.js","index.js"],"names":["axiosCall","userInput","pageNumber","axios","url","method","responseType","params","apikey","s","type","page","then","object","data","Search","searchTerm","setSearchTerm","className","htmlFor","name","id","placeholder","value","onChange","e","target","Results","searchResults","error","setNominations","nominations","map","result","key","imdbID","Title","Year","disabled","filter","nomination","length","onClick","newNomination","alert","updatedNominations","localStorage","setItem","JSON","stringify","handleNomination","Nominations","removedNomination","newNominations","handleDelete","App","useState","setSearchResults","setError","useEffect","a","response","Error","fetchData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e124450f.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst axiosCall = (userInput, pageNumber) => {\n    return axios({\n        url: `http://www.omdbapi.com/`,\n        method: \"GET\",\n        responseType: \"JSON\",\n        params: {\n            apikey: \"a5764580\",\n            s: userInput,\n            type: \"movie\",\n            page: pageNumber\n        }\n    })\n    .then(object => {\n        return object.data;\n    });\n};\n\nexport {axiosCall};","import React from 'react';\n\nconst Search = ({ searchTerm, setSearchTerm }) => {\n    return (\n        <section className=\"search\">\n            <label htmlFor=\"search-movies\">Movie Title</label>\n            <input \n                type=\"text\" \n                name=\"search-movies\" \n                id=\"search-movies\"\n                placeholder=\"Search\"\n                value={searchTerm}\n                onChange={e => setSearchTerm(e.target.value)}\n            />\n        </section>\n    )\n};\n\nexport default Search;","import React from 'react';\n\nconst Results = ({ searchTerm, searchResults, error, setNominations, nominations }) => {\n    const handleNomination = (newNomination) => {\n        if (nominations.length === 5) {\n            alert(\"You can only nominate 5 films\")\n        } else {\n            const updatedNominations = [...nominations, newNomination]\n            setNominations(updatedNominations);\n            localStorage.setItem('nominations', JSON.stringify(updatedNominations));\n        }\n    };\n\n    const checkNomination = (id) => {\n       return nominations.filter(nomination => nomination.imdbID === id).length;\n    };\n\n    return (\n        <section className=\"results\">\n            <h2>Results</h2>\n            <p>{error ? `${error}` : `Results for \"${searchTerm}\"`}</p>\n            <ul>\n                {searchResults.map(result => {\n                    return (\n                        <li\n                            key={result.imdbID}\n                        >\n                            {result.Title} ({result.Year})\n                            <button \n                                disabled={checkNomination(result.imdbID)}\n                                onClick={() => handleNomination(result)}\n                            >\n                                Nominate\n                            </button>\n                        </li>\n                    );\n                })}\n            </ul>\n        </section>\n    )\n};\n\nexport default Results;","import React from 'react';\n\nconst Nominations = ({nominations, setNominations}) => {\n    const handleDelete = (removedNomination) => {\n        const newNominations = nominations.filter((nomination) => nomination !== removedNomination);\n        setNominations(newNominations);\n    };\n    return (\n        <section className=\"nominations\">\n            <h2>Nominations</h2>\n            <ul>\n                {nominations.map(nomination => {\n                    return (\n                        <li key={nomination.imdbID}>\n                            {nomination.Title} ({nomination.Year})\n                            <button onClick={() => handleDelete(nomination)}>\n                                Remove\n                            </button>\n                        </li>\n                    );\n                })};\n             </ul>\n        </section>\n    )\n};\n\nexport default Nominations;","import React, { useState, useEffect } from 'react';\nimport { axiosCall } from './lib/axios.js';\nimport Search from './components/Search.js';\nimport Results from './components/Results.js';\nimport Nominations from './components/Nominations.js';\n// import AllNominations from './components/AllNominations.js';\nimport './App.css';\n\nfunction App() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [error, setError] = useState(\"Please enter a search term\");\n  const [nominations, setNominations] = useState([]);\n  // const [allNominations, setAllNominations] = useState([]);\n\n    useEffect(() => {\n      async function fetchData() {\n        if (searchTerm.length > 1) {\n          const response = await axiosCall(searchTerm);\n          if (response.Search) {\n            setSearchResults(response.Search);\n            setError(\"\");\n          } else {\n            setError(response.Error);\n            setSearchResults([]);\n          }\n        } else {\n          setSearchResults([]);\n          setError(\"Please enter a search term\");\n        }\n      }\n      fetchData();\n    }, [searchTerm])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>The Shoppies</h1>\n        <Search \n          searchTerm={searchTerm} \n          setSearchTerm={setSearchTerm}\n        />\n      </header>\n      <main>\n        <Results\n          searchTerm={searchTerm} \n          searchResults={searchResults} \n          error={error} \n          setNominations={setNominations}\n          nominations={nominations}\n        />\n        <Nominations\n          setNominations={setNominations} \n          nominations={nominations}\n        />\n        {/* <AllNominations\n          setAllNominations={setAllNominations}\n          allNominations={allNominations}\n        /> */}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}